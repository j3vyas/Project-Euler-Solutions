// Jay Vyas
// Jan 13, 2015
// Project Euler - Solution to Problem 12

/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

#include <stdio.h>
#include <math.h>
#include <iostream>  

int calculate(){
	int ans = 0;
	__int64 triangleNum = 1;
	__int64 triangleVal = 1;
	int i;
	while (ans <= 500){
		ans = 0;
		triangleNum++;
		triangleVal = triangleVal + triangleNum;
		for (i = 1; i <= sqrt((double)triangleVal); i++){
			if ((triangleVal%i) == 0){
				ans=ans+2;
			}
		}
	}
	return triangleVal;
}

int main(int argc, char *argv[])
{
	puts("\nProject Euler - Problem 12\n");
	if (argc != 1){
		puts("Error, zero parameters required\n");
		return 0;
	}
	try{
		std::cout << "\nvalue of the first triangle number to have over five hundred divisors is:\n" << calculate() << "\n";
	}
	catch (int e){
		std::cout << "An exception occured: " << e << "\n";
	}
	return 0;

}